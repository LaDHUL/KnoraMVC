{
	"info": {
		"name": "knoramvc-test-suite copy",
		"_postman_id": "c39e378c-b049-3481-11c3-a535b883204a",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"username": "fabula@unil.ch",
						"password": "c2B4",
						"showPassword": false
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "https://{{server}}:{{port}}/session/login"
			},
			"response": []
		},
		{
			"name": "create an institution",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"created resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"    pm.expect(jsonData.id).to.exist;",
							"    ",
							"    // save id for later use",
							"    postman.setEnvironmentVariable(\"institution_id\", jsonData.id);",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"username": "fabula@unil.ch",
						"password": "c2B4",
						"showPassword": false
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"resource\": {\n        \"name\": [ \"{{institution_name}}\" ],\n        \"altname\": [ \"{{institution_alt_name}}\" ]\n    },\n    \"label\": \"{{institution_label}}\"\n}"
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/institution"
			},
			"response": []
		},
		{
			"name": "get created institution",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2391e47c-8320-462e-8e78-9e82f71183e0",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"get expected resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"",
							"    // checking values",
							"    pm.expect(jsonData.resource.id).to.eql(pm.environment.get(\"institution_id\"));",
							"    pm.expect(jsonData.resource.label).to.eql(pm.environment.get(\"institution_label\"))",
							"    pm.expect(jsonData.resource.name.shift().value).to.eql(pm.environment.get(\"institution_name\"));",
							"    pm.expect(jsonData.resource.altname.shift().value).to.eql(pm.environment.get(\"institution_alt_name\"));",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/institution/{{institution_id}}"
			},
			"response": []
		},
		{
			"name": "update the label",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"created resource sanity check\", function () {",
							"    pm.expect(jsonData.status).to.eql(0);",
							"    pm.expect(jsonData.id).to.exist;",
							"    ",
							"    // save id for later use",
							"    postman.setEnvironmentVariable(\"author_id\", jsonData.id);",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"label\",\n    \"value\": \"{{institution_label_edited}}\"\n}"
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/author/{{institution_id}}"
			},
			"response": []
		},
		{
			"name": "get edited institution",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2f524ea9-bf3a-4557-99bb-1f6e65929cfc",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"get expected resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"",
							"    // checking values",
							"    pm.expect(jsonData.resource.id).to.eql(pm.environment.get(\"institution_id\"));",
							"    pm.expect(jsonData.resource.label).to.eql(pm.environment.get(\"institution_label_edited\"))",
							"    pm.expect(jsonData.resource.name.shift().value).to.eql(pm.environment.get(\"institution_name\"));",
							"    pm.expect(jsonData.resource.altname.shift().value).to.eql(pm.environment.get(\"institution_alt_name\"));",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/institution/{{institution_id}}"
			},
			"response": []
		},
		{
			"name": "create an author without external link",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"created resource sanity check\", function () {",
							"    pm.expect(jsonData.status).to.eql(0);",
							"    pm.expect(jsonData.id).to.exist;",
							"    ",
							"    // save id for later use",
							"    postman.setEnvironmentVariable(\"author_id\", jsonData.id);",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"resource\": {\n        \"familyName\": [\n            \"{{author_family_name_1}}\"\n        ],\n        \"givenName\": [\n            \"{{author_given_name}}\"\n        ],\n        \"biography\": [\n            \"{{author_biography}}\"\n        ],\n        \"email\": [\n            \"{{author_email}}\"\n        ],\n        \"reference\": [\n            \"{{author_reference}}\"\n        ],\n        \"furtherInformation\": [\n        \t\"{{author_furtherInformation}}\"\n        ]\n    },\n    \"label\": \"{{author_given_name}}\"\n}"
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/author"
			},
			"response": []
		},
		{
			"name": "get created author without ext. link",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"get expected resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"",
							"    // checking values",
							"    pm.expect(jsonData.resource.id).to.eql(pm.environment.get(\"author_id\"));",
							"    pm.expect(jsonData.resource.familyName.shift().value, 'family name').to.eql(pm.environment.get(\"author_family_name_1\"));",
							"    pm.expect(jsonData.resource.givenName.shift().value, 'givenName').to.eql(pm.environment.get(\"author_given_name\"));",
							"    pm.expect(jsonData.resource.biography.shift().value, 'bio').to.eql(pm.environment.get(\"author_biography\"));",
							"    pm.expect(jsonData.resource.email.shift().value, 'email').to.eql(pm.environment.get(\"author_email\"));",
							"    pm.expect(jsonData.resource.reference.shift().value, 'reference').to.eql(pm.environment.get(\"author_reference\"));",
							"    pm.expect(jsonData.resource.furtherInformation.shift().value, 'further info').to.eql(pm.environment.get(\"author_furtherInformation\"));",
							"    //pm.expect(jsonData.resource.externalReference.shift(), 'external ref').to.eql(pm.environment.get(\"author_externalReference\"));",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/author/{{author_id}}"
			},
			"response": []
		},
		{
			"name": "create/add/mod : create a linkExternal with no author",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"created resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"    pm.expect(jsonData.id).to.exist;",
							"    ",
							"    // save id for later use",
							"    postman.setEnvironmentVariable(\"linkexternal_id\", jsonData.id);",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"username": "fabula@unil.ch",
						"password": "c2B4",
						"showPassword": false
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"resource\": {\n        \"url\": [ \"{{link_url}}\" ]\n    },\n    \"label\": \"{{link_url}}\"\n}"
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/linkexternal"
			},
			"response": []
		},
		{
			"name": "create/add/mod : get created linkExternal with no author",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"get expected resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"",
							"    // checking values",
							"    pm.expect(jsonData.resource.id).to.eql(pm.environment.get(\"linkexternal_id\"));",
							"    pm.expect(jsonData.resource.url.shift().value).to.eql(pm.environment.get(\"link_url\"));",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/linkexternal/{{linkexternal_id}}"
			},
			"response": []
		},
		{
			"name": "create/add/mod : add an author to linkexternal",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"updated resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"    pm.expect(jsonData.id).to.exist;",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"username": "fabula@unil.ch",
						"password": "c2B4",
						"showPassword": false
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t \"resource\": {\n        \"author\": [\n            \"{{author_id}}\"\n        ]\n\t }\n}"
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/linkexternal/{{linkexternal_id}}"
			},
			"response": []
		},
		{
			"name": "create/add/mod : get updated linkExternal with an author",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"get expected resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"",
							"    // checking values",
							"    pm.expect(jsonData.resource.id, 'linkexternal id').to.eql(pm.environment.get(\"linkexternal_id\"));",
							"    ",
							"    // get author",
							"    pm.expect(jsonData.resource.author).to.exist;",
							"    pm.expect(jsonData.resource.author).to.not.be.empty;",
							"    let author = jsonData.resource.author.shift();",
							"    ",
							"    // save link id for later use",
							"    postman.setEnvironmentVariable(\"linkexternal_author_id\", author.id);",
							"",
							"    ",
							"    // test author",
							"    pm.expect(author.value.id, 'author id').to.eql(pm.environment.get(\"author_id\"));",
							"    pm.expect(author.value.familyName.shift().value, 'family name').to.eql(pm.environment.get(\"author_family_name_1\"));",
							"    pm.expect(author.value.givenName.shift().value, 'given name').to.eql(pm.environment.get(\"author_given_name\"));",
							"    pm.expect(author.value.biography.shift().value, 'bio').to.eql(pm.environment.get(\"author_biography\"));",
							"    pm.expect(author.value.email.shift().value, 'email').to.eql(pm.environment.get(\"author_email\"));",
							"    pm.expect(author.value.reference.shift().value, 'reference').to.eql(pm.environment.get(\"author_reference\"));",
							"    pm.expect(author.value.furtherInformation.shift().value, 'further info').to.eql(pm.environment.get(\"author_furtherInformation\"));",
							"    // there is no external ref yet",
							"    //pm.expect(jsonData.resource.externalReference.shift().url.shift(), 'external ref').to.eql(pm.environment.get(\"author_externalReference\"));",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/linkexternal/{{linkexternal_id}}"
			},
			"response": []
		},
		{
			"name": "create/add/mod : create another author",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"created resource sanity check\", function () {",
							"    pm.expect(jsonData.status).to.eql(0);",
							"    pm.expect(jsonData.id).to.exist;",
							"    ",
							"    // save id for later use",
							"    postman.setEnvironmentVariable(\"author2_id\", jsonData.id);",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"resource\": {\n        \"familyName\": [\n            \"{{author_family_name_1}}\"\n        ],\n        \"givenName\": [\n            \"{{author_given_name}}\"\n        ],\n        \"biography\": [\n            \"{{author_biography}}\"\n        ],\n        \"email\": [\n            \"{{author_email}}\"\n        ],\n        \"reference\": [\n            \"{{author_reference}}\"\n        ],\n        \"furtherInformation\": [\n        \t\"{{author_furtherInformation}}\"\n        ]\n    },\n    \"label\": \"{{author_given_name}}\"\n}"
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/author"
			},
			"response": []
		},
		{
			"name": "create/add/mod : update link with an author",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"updated resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"    pm.expect(jsonData.id).to.exist;",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"username": "fabula@unil.ch",
						"password": "c2B4",
						"showPassword": false
					}
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"id\": \"{{linkexternal_author_id}}\",\n\t\"value\": \"{{author2_id}}\"\n}\n"
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/linkexternal/{{linkexternal_id}}"
			},
			"response": []
		},
		{
			"name": "create/add/mod : get updated linkExternal with yet another author",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"get expected resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"",
							"    // checking values",
							"    pm.expect(jsonData.resource.id).to.eql(pm.environment.get(\"linkexternal_id\"));",
							"    ",
							"    // url",
							"    let url = jsonData.resource.url.shift();",
							"    pm.expect(url.value, 'url').to.eql(pm.environment.get(\"link_url\"));",
							"",
							"    // save link id for later use",
							"    postman.setEnvironmentVariable(\"linkexternal_url_id\", url.id);",
							"    ",
							"    // check that we updated the resource",
							"    pm.expect(jsonData.resource.author, 'author should exist').to.exist;",
							"    pm.expect(jsonData.resource.author, 'author should not be empty').to.not.be.empty;",
							"    pm.expect(jsonData.resource.author.shift().value.id).to.eql(pm.environment.get(\"author2_id\"));",
							"",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/linkexternal/{{linkexternal_id}}"
			},
			"response": []
		},
		{
			"name": "create/add/mod : update link change url",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"updated resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"    pm.expect(jsonData.id).to.exist;",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"username": "fabula@unil.ch",
						"password": "c2B4",
						"showPassword": false
					}
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"id\": \"{{linkexternal_url_id}}\",\n\t\"value\": \"{{link_url2}}\"\n}\n"
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/linkexternal/{{linkexternal_id}}"
			},
			"response": []
		},
		{
			"name": "create/add/mod : get updated linkExternal with yet another author copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"get expected resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"",
							"    // checking values",
							"    pm.expect(jsonData.resource.id).to.eql(pm.environment.get(\"linkexternal_id\"));",
							"    ",
							"    // url",
							"    let url = jsonData.resource.url.shift();",
							"    pm.expect(url.value, 'url').to.eql(pm.environment.get(\"link_url2\"));",
							"",
							"    // save link id for later use",
							"    postman.setEnvironmentVariable(\"linkexternal_url_id\", url.id);",
							"    ",
							"    // check that we updated the resource",
							"    pm.expect(jsonData.resource.author, 'author should exist').to.exist;",
							"    pm.expect(jsonData.resource.author, 'author should not be empty').to.not.be.empty;",
							"    pm.expect(jsonData.resource.author.shift().value.id).to.eql(pm.environment.get(\"author2_id\"));",
							"",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/linkexternal/{{linkexternal_id}}"
			},
			"response": []
		},
		{
			"name": "create a linkExternal",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"created resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"    pm.expect(jsonData.id).to.exist;",
							"    ",
							"    // save id for later use",
							"    postman.setEnvironmentVariable(\"linkexternal_id\", jsonData.id);",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"username": "fabula@unil.ch",
						"password": "c2B4",
						"showPassword": false
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"resource\": {\n        \"url\": [ \"{{link_url}}\" ],\n        \"author\": [ \"{{author_id}}\" ]\n    },\n    \"label\": \"{{link_url}}\"\n}"
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/linkexternal"
			},
			"response": []
		},
		{
			"name": "get created linkExternal",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"get expected resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"",
							"    // checking values",
							"    pm.expect(jsonData.resource.id).to.eql(pm.environment.get(\"linkexternal_id\"));",
							"    pm.expect(jsonData.resource.url.shift().value, 'url').to.eql(pm.environment.get(\"link_url\"));",
							"    ",
							"    pm.expect(jsonData.resource.author, 'author should exist').to.exist;",
							"    pm.expect(jsonData.resource.author, 'author should not be empty').to.not.be.empty;",
							"    pm.expect(jsonData.resource.author.shift().value.id).to.eql(pm.environment.get(\"author_id\"));",
							"",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/linkexternal/{{linkexternal_id}}"
			},
			"response": []
		},
		{
			"name": "delete - create a linkExternal with 2 authors",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"created resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"    pm.expect(jsonData.id).to.exist;",
							"    ",
							"    // save id for later use",
							"    postman.setEnvironmentVariable(\"linkexternal2_id\", jsonData.id);",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"username": "fabula@unil.ch",
						"password": "c2B4",
						"showPassword": false
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"resource\": {\n        \"url\": [ \"{{link_url}}\" ],\n        \"author\": [ \"{{author_id}}\", \"{{author2_id}}\" ]\n    },\n    \"label\": \"{{link_url}}\"\n}"
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/linkexternal"
			},
			"response": []
		},
		{
			"name": "delete - get created linkExternal 2 authors",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"get expected resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"",
							"    // checking values",
							"    pm.expect(jsonData.resource.id, 'linkexternal id').to.eql(pm.environment.get(\"linkexternal2_id\"));",
							"    let url = jsonData.resource.url.shift();",
							"    pm.expect(url.value, 'url').to.eql(pm.environment.get(\"link_url\"));",
							"",
							"    // save for later use    ",
							"    postman.setEnvironmentVariable(\"linkexternal2_url_id\", url.id);",
							"",
							"    ",
							"    pm.expect(jsonData.resource.author, 'author should exist').to.exist;",
							"    pm.expect(jsonData.resource.author, 'author should not be empty').to.not.be.empty;",
							"    pm.expect(jsonData.resource.author.length, 'there should be two authors').to.eql(2);",
							"    // there is no expected order",
							"    let firstAuthor = jsonData.resource.author.shift().value;",
							"    let secondAuthor = jsonData.resource.author.shift().value;",
							"    if (firstAuthor.id === pm.environment.get(\"author_id\")) {",
							"        pm.expect(secondAuthor.id, 'second author should be author 2').to.eql(pm.environment.get(\"author2_id\"));",
							"    } else {",
							"        // first author is not author",
							"        pm.expect(firstAuthor.id, 'first author should be author 2').to.eql(pm.environment.get(\"author2_id\"));",
							"        pm.expect(secondAuthor.id, 'second author should be author 1').to.eql(pm.environment.get(\"author_id\"));",
							"    }",
							"",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/linkexternal/{{linkexternal2_id}}"
			},
			"response": []
		},
		{
			"name": "delete - delete url",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"updated resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"    pm.expect(jsonData.id).to.exist;",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"username": "fabula@unil.ch",
						"password": "c2B4",
						"showPassword": false
					}
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"id\": \"{{linkexternal2_url_id}}\",\n\t    \"label\": \"{{link_url}}\"\n\n}"
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/linkexternal/{{linkexternal2_id}}"
			},
			"response": []
		},
		{
			"name": "delete - linkExternal no url",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"get expected resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"",
							"    // checking values",
							"    pm.expect(jsonData.resource.id, 'linkexternal id').to.eql(pm.environment.get(\"linkexternal2_id\"));",
							"    pm.expect(jsonData.resource.url, 'url').to.be.empty;",
							"    ",
							"    pm.expect(jsonData.resource.author, 'author should exist').to.exist;",
							"    pm.expect(jsonData.resource.author, 'author should not be empty').to.not.be.empty;",
							"    ",
							"    // there is no expected order",
							"    let firstAuthor = jsonData.resource.author.shift();",
							"    let secondAuthor = jsonData.resource.author.shift();",
							"    if (firstAuthor.value.id === pm.environment.get(\"author_id\")) {",
							"        pm.expect(secondAuthor.value.id, 'second author should be author 2').to.eql(pm.environment.get(\"author2_id\"));",
							"    } else {",
							"        // first author is not author",
							"        pm.expect(firstAuthor.value.id, 'first author should be author 2').to.eql(pm.environment.get(\"author2_id\"));",
							"        pm.expect(secondAuthor.value.id, 'second author should be author 1').to.eql(pm.environment.get(\"author_id\"));",
							"    }",
							"",
							"    // save property id in order to delete secondAuthor",
							"    postman.setEnvironmentVariable(\"linkexternal2_secondauthor_id\", secondAuthor.id);",
							"    // save property to check that only first author is left",
							"    postman.setEnvironmentVariable(\"linkexternal2_expected_author_id\", firstAuthor.value.id);",
							"",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/linkexternal/{{linkexternal2_id}}"
			},
			"response": []
		},
		{
			"name": "delete - delete a linkExternal's author",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"updated resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"    pm.expect(jsonData.id).to.exist;",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"username": "fabula@unil.ch",
						"password": "c2B4",
						"showPassword": false
					}
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\t\n\t\"id\": \"{{linkexternal2_secondauthor_id}}\"\n}"
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/linkexternal/{{linkexternal2_id}}"
			},
			"response": []
		},
		{
			"name": "delete - linkExternal still has one author",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"get expected resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"",
							"    // checking values",
							"    pm.expect(jsonData.resource.id, 'linkexternal id').to.eql(pm.environment.get(\"linkexternal2_id\"));",
							"",
							"    pm.expect(jsonData.resource.author, 'author should exist').to.exist;",
							"    pm.expect(jsonData.resource.author, 'author should not be empty').to.not.be.empty;",
							"    pm.expect(jsonData.resource.author.length, 'there should be just author').to.eql(1);",
							"",
							"    // there is no expected order",
							"    let author = jsonData.resource.author.shift();",
							"    pm.expect(author.value.id, 'author id').to.eql(pm.environment.get(\"linkexternal2_expected_author_id\"));",
							"",
							"    // save property id in order to delete secondAuthor",
							"    postman.setEnvironmentVariable(\"linkexternal2_author_id\", author.id);",
							"",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/linkexternal/{{linkexternal2_id}}"
			},
			"response": []
		},
		{
			"name": "delete - delete a linkExternal's second author",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"updated resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"    pm.expect(jsonData.id).to.exist;",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"username": "fabula@unil.ch",
						"password": "c2B4",
						"showPassword": false
					}
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"id\": \"{{linkexternal2_author_id}}\"\n}"
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/linkexternal/{{linkexternal2_id}}"
			},
			"response": []
		},
		{
			"name": "delete - linkExternal still has no author",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"get expected resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"",
							"    // checking values",
							"    pm.expect(jsonData.resource.id, 'linkexternal id').to.eql(pm.environment.get(\"linkexternal2_id\"));",
							"    pm.expect(jsonData.resource.author, 'author should exist').to.exist;",
							"    pm.expect(jsonData.resource.author, 'author should be empty').to.be.empty;",
							"",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/linkexternal/{{linkexternal2_id}}"
			},
			"response": []
		},
		{
			"name": "delete - delete linkExternal",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"updated resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"    pm.expect(jsonData.id).to.exist;",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"username": "fabula@unil.ch",
						"password": "c2B4",
						"showPassword": false
					}
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/linkexternal/{{linkexternal2_id}}"
			},
			"response": []
		},
		{
			"name": "delete - linkExternal still has no author copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"get expected resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status, 'status').to.eql(999);",
							"    if (!jsonData.message.includes('not found')) {",
							"        pm.fail('wrong message');",
							"    }",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/linkexternal/{{linkexternal2_id}}"
			},
			"response": []
		},
		{
			"name": "create/update author: create an author with a link",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"created resource sanity check\", function () {",
							"    pm.expect(jsonData.status).to.eql(0);",
							"    pm.expect(jsonData.id).to.exist;",
							"    ",
							"    // save id for later use",
							"    postman.setEnvironmentVariable(\"author_id\", jsonData.id);",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"resource\": {\n        \"familyName\": [\n            \"{{author_family_name_1}}\"\n        ],\n        \"givenName\": [\n            \"{{author_given_name}}\"\n        ],\n        \"biography\": [\n            \"{{author_biography}}\"\n        ],\n        \"email\": [\n            \"{{author_email}}\"\n        ],\n        \"reference\": [\n            \"{{author_reference}}\"\n        ],\n        \"furtherInformation\": [\n        \t\"{{author_furtherInformation}}\"\n        ],\n        \"externalReference\": [\n        \t\"{{linkexternal_id}}\"\n        ]\n    },\n    \"label\": \"{{author_given_name}}\"\n}"
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/author"
			},
			"response": []
		},
		{
			"name": "create/update author: get created author with a link",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"get expected resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"",
							"    // checking values",
							"    pm.expect(jsonData.resource.id, 'id').to.eql(pm.environment.get(\"author_id\"));",
							"",
							"    let family_name = jsonData.resource.familyName.shift();",
							"    pm.expect(family_name.value, 'family name').to.eql(pm.environment.get(\"author_family_name_1\"));",
							"    // save link id for later use",
							"    postman.setEnvironmentVariable(\"author_familyName_id\", family_name.id);",
							"",
							"    pm.expect(jsonData.resource.givenName.shift().value, 'given name').to.eql(pm.environment.get(\"author_given_name\"));",
							"    pm.expect(jsonData.resource.biography.shift().value, 'bio').to.eql(pm.environment.get(\"author_biography\"));",
							"    pm.expect(jsonData.resource.email.shift().value, 'email').to.eql(pm.environment.get(\"author_email\"));",
							"    pm.expect(jsonData.resource.reference.shift().value, 'reference').to.eql(pm.environment.get(\"author_reference\"));",
							"    pm.expect(jsonData.resource.furtherInformation.shift().value, 'further info').to.eql(pm.environment.get(\"author_furtherInformation\"));",
							"    pm.expect(jsonData.resource.externalReference.shift().value.url.shift().value).to.eql(pm.environment.get(\"author_externalReference\"));",
							"    ",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/author/{{author_id}}"
			},
			"response": []
		},
		{
			"name": "create/update author: update author",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"updated resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"    pm.expect(jsonData.id).to.exist;",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"username": "fabula@unil.ch",
						"password": "c2B4",
						"showPassword": false
					}
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"id\": \"{{author_familyName_id}}\",\n\t\"value\": \"{{author_family_name_2}}\"\n}"
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/author/{{author_id}}"
			},
			"response": []
		},
		{
			"name": "create/update author: get created updated author",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"get expected resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"",
							"    // checking values",
							"    pm.expect(jsonData.resource.id).to.eql(pm.environment.get(\"author_id\"));",
							"    pm.expect(jsonData.resource.familyName.shift().value).to.eql(pm.environment.get(\"author_family_name_2\"));",
							"    pm.expect(jsonData.resource.givenName.shift().value).to.eql(pm.environment.get(\"author_given_name\"));",
							"    pm.expect(jsonData.resource.biography.shift().value).to.eql(pm.environment.get(\"author_biography\"));",
							"    pm.expect(jsonData.resource.email.shift().value).to.eql(pm.environment.get(\"author_email\"));",
							"    pm.expect(jsonData.resource.reference.shift().value).to.eql(pm.environment.get(\"author_reference\"));",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/author/{{author_id}}"
			},
			"response": []
		},
		{
			"name": "create/update notion: create notion with an author",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"created resource sanity check\", function () {",
							"    pm.expect(jsonData.status).to.eql(0);",
							"    pm.expect(jsonData.id).to.exist;",
							"    ",
							"    // save id for later use",
							"    postman.setEnvironmentVariable(\"notion1_id\", jsonData.id);",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"username": "fabula@unil.ch",
						"password": "c2B4",
						"showPassword": false
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"resource\": {\n        \"name\": [ \"{{notion1_name}}\" ],\n        \"definition\": [ \"{{notion1_definition}}\" ],\n        \"references\": [ \"{{notion1_references}}\" ],\n        \"author\": [ \"{{author_id}}\" ]\n    },\n    \"label\": \"{{notion1_name}}\"\n}"
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/notion"
			},
			"response": []
		},
		{
			"name": "create/update notion: get created notion",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"get expected resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"",
							"    // checking values",
							"    pm.expect(jsonData.resource.id, 'notion id').to.eql(pm.environment.get(\"notion1_id\"));",
							"    pm.expect(jsonData.resource.name.shift().value, 'notion name').to.eql(pm.environment.get(\"notion1_name\"));",
							"    pm.expect(jsonData.resource.definition.shift().value, 'notion definition').to.eql(pm.environment.get(\"notion1_definition\"));",
							"    pm.expect(jsonData.resource.references.shift().value, 'notion references').to.eql(pm.environment.get(\"notion1_references\"));",
							"",
							"    // checking author values",
							"    pm.expect(jsonData.resource.author).to.exist;",
							"    pm.expect(jsonData.resource.author).to.not.be.empty;",
							"",
							"    var author = jsonData.resource.author.shift();",
							"    ",
							"    pm.expect(author.value.id, 'author id').to.eql(pm.environment.get(\"author_id\"));",
							"    pm.expect(author.value.familyName.shift().value).to.eql(pm.environment.get(\"author_family_name_2\"));",
							"    pm.expect(author.value.givenName.shift().value).to.eql(pm.environment.get(\"author_given_name\"));",
							"    pm.expect(author.value.biography.shift().value).to.eql(pm.environment.get(\"author_biography\"));",
							"    pm.expect(author.value.email.shift().value).to.eql(pm.environment.get(\"author_email\"));",
							"    pm.expect(author.value.reference.shift().value).to.eql(pm.environment.get(\"author_reference\"));",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/notion/{{notion1_id}}"
			},
			"response": []
		},
		{
			"name": "create/update notion: create a notion with a notion link",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"created resource sanity check\", function () {",
							"    pm.expect(jsonData.status).to.eql(0);",
							"    pm.expect(jsonData.id).to.exist;",
							"    ",
							"    // save id for later use",
							"    postman.setEnvironmentVariable(\"notion2_id\", jsonData.id);",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"username": "fabula@unil.ch",
						"password": "c2B4",
						"showPassword": false
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"resource\": {\n        \"name\": [ \"{{notion2_name}}\" ],\n        \"definition\": [ \"{{notion1_definition}}\" ],\n        \"parentNotion\": [ \"{{notion1_id}}\" ]\n    },\n    \"label\": \"{{notion2_name}}\"\n}"
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/notion"
			},
			"response": []
		},
		{
			"name": "create/update notion: get second created notion",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"get expected resource\", function () {",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"",
							"    // checking values",
							"    pm.expect(jsonData.resource.id, 'notion 2 id').to.eql(pm.environment.get(\"notion2_id\"));",
							"    pm.expect(jsonData.resource.name.shift().value, 'notion 2 name').to.eql(pm.environment.get(\"notion2_name\"));",
							"    pm.expect(jsonData.resource.definition.shift().value, 'notion 2 definition (same as notion 1)').to.eql(pm.environment.get(\"notion1_definition\"));",
							"    ",
							"    // references was not filled",
							"    pm.expect(jsonData.resource.references, 'notion 2 references, not filled but exists').to.exist;",
							"    pm.expect(jsonData.resource.references, 'notion 2 references, not filled: is empty').to.be.empty;",
							"",
							"    // author was not filled",
							"    pm.expect(jsonData.resource.author, 'notion 2 author, not filled but exists').to.exist;",
							"    pm.expect(jsonData.resource.author, 'notion 2 author, not filled: is empty').to.be.empty;",
							"});",
							"",
							"pm.test(\"get expected resource's parent notion\", function () {",
							"",
							"    // checking parent notion exists",
							"    pm.expect(jsonData.resource.parentNotion, 'notion 2 parent notion, should exists').to.exist;",
							"    pm.expect(jsonData.resource.parentNotion, 'notion 2 parent notion, should not be empty').to.not.be.empty;",
							"",
							"    // get the parent notion",
							"    var parent = jsonData.resource.parentNotion.shift();",
							"    ",
							"    // save link id for later use",
							"    postman.setEnvironmentVariable(\"notion2_parentNotion_id\", parent.id);",
							"",
							"    // same check parent notion",
							"    pm.expect(parent.value.id, 'parent notion id').to.eql(pm.environment.get(\"notion1_id\"));",
							"    pm.expect(parent.value.name.shift().value, 'parent notion name').to.eql(pm.environment.get(\"notion1_name\"));",
							"    pm.expect(parent.value.definition.shift().value, 'parent notion definition').to.eql(pm.environment.get(\"notion1_definition\"));",
							"    pm.expect(parent.value.references.shift().value, 'parent notion references').to.eql(pm.environment.get(\"notion1_references\"));",
							"",
							"    // checking parent notion author values",
							"    pm.expect(parent.value.author, 'parent notion references').to.exist;",
							"    pm.expect(parent.value.author, 'parent notion references').to.not.be.empty;",
							"",
							"    var parent_author = parent.value.author.shift();",
							"    ",
							"    // parent is there but not dereferenced to avoid loops",
							"    pm.expect(parent_author.value.id, 'parent author id').to.eql(pm.environment.get(\"author_id\"));",
							"    pm.expect(parent_author.value.familyName).to.not.exist;",
							"    pm.expect(parent_author.value.givenName).to.not.exist;",
							"    pm.expect(parent_author.value.biography).to.not.exist;",
							"    pm.expect(parent_author.email).to.not.exist;",
							"    pm.expect(parent_author.reference).to.not.exist;",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/notion/{{notion2_id}}"
			},
			"response": []
		},
		{
			"name": "create/update notion: update second notion to make a cycle link",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"updated resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"    pm.expect(jsonData.id).to.exist;",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"username": "fabula@unil.ch",
						"password": "c2B4",
						"showPassword": false
					}
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"id\": \"{{notion2_parentNotion_id}}\",\n\t\"value\": \"{{notion2_id}}\"\n}"
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/notion/{{notion2_id}}"
			},
			"response": []
		},
		{
			"name": "create/update notion: get second notion updated",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"get expected resource\", function () {",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"",
							"    // checking values",
							"    pm.expect(jsonData.resource.id, 'notion 2 id').to.eql(pm.environment.get(\"notion2_id\"));",
							"    pm.expect(jsonData.resource.name.shift().value, 'notion 2 name').to.eql(pm.environment.get(\"notion2_name\"));",
							"    pm.expect(jsonData.resource.definition.shift().value, 'notion 2 definition (same as notion 1)').to.eql(pm.environment.get(\"notion1_definition\"));",
							"    ",
							"    // references was not filled",
							"    pm.expect(jsonData.resource.references, 'notion 2 references, not filled but exists').to.exist;",
							"    pm.expect(jsonData.resource.references, 'notion 2 references, not filled: is empty').to.be.empty;",
							"",
							"    // author was not filled",
							"    pm.expect(jsonData.resource.author, 'notion 2 author, not filled but exists').to.exist;",
							"    pm.expect(jsonData.resource.author, 'notion 2 author, not filled: is empty').to.be.empty;",
							"});",
							"",
							"pm.test(\"get expected resource's parent notion\", function () {",
							"",
							"    // checking parent notion exists",
							"    pm.expect(jsonData.resource.parentNotion, 'notion 2 parent notion, should exists').to.exist;",
							"    pm.expect(jsonData.resource.parentNotion, 'notion 2 parent notion, should not be empty').to.not.be.empty;",
							"",
							"    // get the parent notion",
							"    var parent = jsonData.resource.parentNotion.shift();",
							"    ",
							"    // same check parent notion",
							"    pm.expect(parent.value.id, 'parent notion id, link to ourself').to.eql(pm.environment.get(\"notion2_id\"));",
							"",
							"    // checking grand parent (parent notion's parent notion)",
							"    // checking grand parent notion exists",
							"    pm.expect(parent.value.parentNotion, 'notion 2 grand parent notion, should exists').to.exist;",
							"    pm.expect(parent.value.parentNotion, 'notion 2 grand parent notion, should not be empty').to.not.be.empty;",
							"",
							"",
							"    // get the parent notion",
							"    var grand_parent = parent.value.parentNotion.shift();",
							"",
							"    // grand parent is there but not dereferenced to avoid loops",
							"    pm.expect(grand_parent.value.id, 'grand parent notion id, link to ourself').to.eql(pm.environment.get(\"notion2_id\"));",
							"    pm.expect(grand_parent.value.name, 'grand parent name is not present').to.not.exist;",
							"",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/notion/{{notion2_id}}"
			},
			"response": []
		},
		{
			"name": "create a collection",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"created resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"    pm.expect(jsonData.id).to.exist;",
							"    ",
							"    // save id for later use",
							"    postman.setEnvironmentVariable(\"collection_id\", jsonData.id);",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"username": "fabula@unil.ch",
						"password": "c2B4",
						"showPassword": false
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"resource\": {\n        \"note\": [ \"{{collection_note}}\" ],\n        \"title\": [ \"{{collection_title}}\" ],\n        \"notion\": [ \"{{notion1_id}}\" ],\n        \"author\": [ \"{{author_id}}\"],\n        \"firstpublication\": [ \"GREGORIAN:{{collection_date}} CE\" ],\n        \"onlinepublication\": [ \"GREGORIAN:{{collection_date}} CE\" ]\n    },\n    \"label\": \"{{collection_note}}\"\n}"
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/collection"
			},
			"response": []
		},
		{
			"name": "get created collection",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"get expected resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"",
							"    // checking values",
							"    pm.expect(jsonData.resource.id, 'collection id').to.eql(pm.environment.get(\"collection_id\"));",
							"    pm.expect(jsonData.resource.note.shift().value, 'note').to.eql(pm.environment.get(\"collection_note\"));",
							"    pm.expect(jsonData.resource.title.shift().value, 'title').to.eql(pm.environment.get(\"collection_title\"));",
							"",
							"    pm.expect(jsonData.resource.notion.shift().value.id, 'notion').to.eql(pm.environment.get(\"notion1_id\"));",
							"    pm.expect(jsonData.resource.author.shift().value.id, 'author').to.eql(pm.environment.get(\"author_id\"));",
							"",
							"    pm.expect(jsonData.resource.firstpublication.shift().value.dateval1, 'firstpublication').to.eql(pm.environment.get(\"collection_date\"));",
							"    pm.expect(jsonData.resource.onlinepublication.shift().value.dateval1, 'onlinepublication').to.eql(pm.environment.get(\"collection_date\"));",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/collection/{{collection_id}}"
			},
			"response": []
		},
		{
			"name": "get list",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ee2f4678-8d2b-48eb-be12-b3fe70d6397e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"get expected resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": "https://{{server}}:{{port}}/lists/atelier-fabula/{{list_types}}"
			},
			"response": []
		},
		{
			"name": "get another list",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9481869d-9435-457d-b446-9cbc1883bfc5",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"get expected resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": "https://{{server}}:{{port}}/lists/atelier-fabula/status"
			},
			"response": []
		},
		{
			"name": "create a minimal article",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "09562e07-3ccf-4304-9cd0-e010182fede0",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"created resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"    pm.expect(jsonData.id).to.exist;",
							"    ",
							"    // save id for later use",
							"    postman.setEnvironmentVariable(\"article_id\", jsonData.id);",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"username": "fabula@unil.ch",
						"password": "c2B4",
						"showPassword": false
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"resource\": {\n        \"title\": [ \"{{article_title}}\" ],\n        \"author\": [ \"{{author_id}}\"],\n        \"notions\": [ \"{{notion1_id}}\" ],\n        \"status\": [ \"published\" ]\n    },\n    \"label\": \"{{article_title}}\"\n}"
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/article"
			},
			"response": []
		},
		{
			"name": "create a less minimal article",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "09562e07-3ccf-4304-9cd0-e010182fede0",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"created resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"    pm.expect(jsonData.id).to.exist;",
							"    ",
							"    // save id for later use",
							"    postman.setEnvironmentVariable(\"article_id\", jsonData.id);",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"username": "fabula@unil.ch",
						"password": "c2B4",
						"showPassword": false
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"resource\": {\n        \"title\": [ \"{{article_title}}\" ],\n        \"subtitle\": [ \"{{article_subtitle}}\" ],\n        \"author\": [ \"{{author_id}}\"],\n        \"affiliation\": [ \"{{institution_id}}\" ],\n        \"notions\": [ \"{{notion1_id}}\" ],\n        \"keywords\": [ \"{{notion1_id}}\" ],\n        \"status\": [ \"published\" ],\n        \"firstpublication\": [ \"GREGORIAN:{{collection_date}} CE\" ],\n        \"onlinepublication\": [ \"GREGORIAN:{{collection_date}} CE\" ],\n        \"collection\": [ \"{{collection_id}}\" ]\n    },\n    \"label\": \"{{article_title}}\"\n}"
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/article"
			},
			"response": []
		},
		{
			"name": "create an article",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "09562e07-3ccf-4304-9cd0-e010182fede0",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"created resource\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // sanity checks",
							"    pm.expect(jsonData.status).to.eql(0);",
							"    pm.expect(jsonData.id).to.exist;",
							"    ",
							"    // save id for later use",
							"    postman.setEnvironmentVariable(\"article_id\", jsonData.id);",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"username": "fabula@unil.ch",
						"password": "c2B4",
						"showPassword": false
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"resource\": {\n        \"title\": [ \"{{article_title}}\" ],\n        \"subtitle\": [ \"{{article_subtitle}}\" ],\n        \"introduction\": [ \"{{article_introduction}}\" ],\n        \"author\": [ \"{{author_id}}\"],\n        \"bodytext\": [ \"{{article_bodytext}}\"],\n        \"references\": [ \"{{article_references}}\" ],\n        \"affiliation\": [ \"{{institution_id}}\" ],\n        \"notions\": [ \"{{notion1_id}}\" ],\n        \"keywords\": [ \"{{notion1_id}}\" ],\n        \"firstpublication\": [ \"GREGORIAN:{{collection_date}} CE\" ],\n        \"onlinepublication\": [ \"GREGORIAN:{{collection_date}} CE\" ],\n        \"collection\": [ \"{{collection_id}}\" ]\n    },\n    \"label\": \"{{article_title}}\"\n}"
				},
				"url": "https://{{server}}:{{port}}/resources/atelier-fabula/article"
			},
			"response": []
		}
	]
}